// Vitest Snapshot v1

exports[`generate 1`] = `
"import { CliUx, Command } from \\"@oclif/core\\";
import { PrismaClient } from \\"@prisma/client\\";

export class QueryCommand extends Command {
  flags = {};
  
  async init() {
    await super.init();
    const { flags } = await this.parse(this.ctor);
    this.flags = flags;
  }

  async query() {}

  getQueryArgs() {
    return Object.keys(this.flags).reduce((acc, path) => {
      const keys = path.split('.');
      let cur = acc;
      if (path === \\"_csv\\") {
        return acc;
      }
      keys.forEach((key, i) => {
        if (i < keys.length - 1) {
          cur[key] = cur[key] || {};
          cur = cur[key];
        }
        else {
          cur[key] = this.flags[path];
        }
      });
      return acc;
    }, {});
  }

  async outputQueryResult(data) {
    const isArray = Array.isArray(data);
    if (data === null) {
      console.log(\\"Record not found\\");
      return;
    } else if (isArray && data.length === 0) {
      console.log(\\"No records found\\");
      return;
    }

    const dataArray = isArray ? data : [data];
    const keys = Object.keys(dataArray[0]), columns = {};

    for (const key of keys) {
      columns[key] = {};
    }
    
    CliUx.ux.table(dataArray, columns, { csv: this.flags[\\"_csv\\"] ?? false });
  }

  async run() {
    const client = new PrismaClient();
    const args = this.getQueryArgs()
    const result = await this.query(client, args);
    this.outputQueryResult(result);
  }
}"
`;

exports[`generate 2`] = `
"#!/usr/bin/env node

const oclif = require('@oclif/core')

oclif.run().then(require('@oclif/core/flush')).catch(require('@oclif/core/handle'))"
`;

exports[`generate 3`] = `
"import { Command, Help } from \\"@oclif/core\\";

export default class UserCommand extends Command {
  static hidden = true;

  async run() {
    new Help(this.config).showTopicHelp({ name: \\"user\\" });
  }
}"
`;

exports[`generate 4`] = `
"import { Flags } from \\"@oclif/core\\";
import { QueryCommand } from \\"../../QueryCommand.mjs\\";

export default class FindManyUserCommand extends QueryCommand {
  static flags = {
    _csv: Flags.boolean(),
    [\\"where.id.equals\\"]: Flags.integer({}),
    [\\"where.id.in\\"]: Flags.integer({}),
    [\\"where.id.notIn\\"]: Flags.integer({}),
    [\\"where.id.lt\\"]: Flags.integer({}),
    [\\"where.id.lte\\"]: Flags.integer({}),
    [\\"where.id.gt\\"]: Flags.integer({}),
    [\\"where.id.gte\\"]: Flags.integer({}),
    [\\"where.id.not\\"]: Flags.integer({}),
    [\\"where.id\\"]: Flags.integer({}),
    [\\"where.email.equals\\"]: Flags.string({}),
    [\\"where.email.in\\"]: Flags.string({}),
    [\\"where.email.notIn\\"]: Flags.string({}),
    [\\"where.email.lt\\"]: Flags.string({}),
    [\\"where.email.lte\\"]: Flags.string({}),
    [\\"where.email.gt\\"]: Flags.string({}),
    [\\"where.email.gte\\"]: Flags.string({}),
    [\\"where.email.contains\\"]: Flags.string({}),
    [\\"where.email.startsWith\\"]: Flags.string({}),
    [\\"where.email.endsWith\\"]: Flags.string({}),
    [\\"where.email.mode\\"]: Flags.enum({\\"options\\":[\\"default\\",\\"insensitive\\"]}),
    [\\"where.email.not\\"]: Flags.string({}),
    [\\"where.email\\"]: Flags.string({}),
    [\\"where.name.equals\\"]: Flags.string({}),
    [\\"where.name.in\\"]: Flags.string({}),
    [\\"where.name.notIn\\"]: Flags.string({}),
    [\\"where.name.lt\\"]: Flags.string({}),
    [\\"where.name.lte\\"]: Flags.string({}),
    [\\"where.name.gt\\"]: Flags.string({}),
    [\\"where.name.gte\\"]: Flags.string({}),
    [\\"where.name.contains\\"]: Flags.string({}),
    [\\"where.name.startsWith\\"]: Flags.string({}),
    [\\"where.name.endsWith\\"]: Flags.string({}),
    [\\"where.name.mode\\"]: Flags.enum({\\"options\\":[\\"default\\",\\"insensitive\\"]}),
    [\\"where.name.not\\"]: Flags.string({}),
    [\\"where.name\\"]: Flags.string({}),
    [\\"where.profile.id\\"]: Flags.integer({}),
    [\\"where.profile.bio\\"]: Flags.string({}),
    [\\"where.profile.userId\\"]: Flags.integer({}),
    [\\"where.role.equals\\"]: Flags.enum({\\"options\\":[\\"ADMIN\\",\\"USER\\"]}),
    [\\"where.role.in\\"]: Flags.enum({\\"options\\":[\\"ADMIN\\",\\"USER\\"]}),
    [\\"where.role.notIn\\"]: Flags.enum({\\"options\\":[\\"ADMIN\\",\\"USER\\"]}),
    [\\"where.role.not\\"]: Flags.enum({\\"options\\":[\\"ADMIN\\",\\"USER\\"]}),
    [\\"where.role\\"]: Flags.enum({\\"options\\":[\\"ADMIN\\",\\"USER\\"]}),
    [\\"orderBy.id\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.email\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.name\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.posts._count\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.profile.id\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.profile.bio\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.profile.userId\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.role\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.id\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.email\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.name\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.posts._count\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.profile.id\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.profile.bio\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.profile.userId\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"orderBy.role\\"]: Flags.enum({\\"options\\":[\\"asc\\",\\"desc\\"]}),
    [\\"cursor.id\\"]: Flags.integer({}),
    [\\"cursor.email\\"]: Flags.string({}),
    [\\"take\\"]: Flags.integer({}),
    [\\"skip\\"]: Flags.integer({}),
    [\\"distinct\\"]: Flags.enum({\\"options\\":[\\"id\\",\\"email\\",\\"name\\",\\"role\\"]}),
  };

  async query(client, args) {
    return client.user.findMany(args);
  }
}"
`;

exports[`generate 5`] = `
"import { Flags } from \\"@oclif/core\\";
import { QueryCommand } from \\"../../QueryCommand.mjs\\";

export default class DeleteOneUserCommand extends QueryCommand {
  static flags = {
    _csv: Flags.boolean(),
    [\\"where.id\\"]: Flags.integer({}),
    [\\"where.email\\"]: Flags.string({}),
  };

  async query(client, args) {
    return client.user.delete(args);
  }
}"
`;
