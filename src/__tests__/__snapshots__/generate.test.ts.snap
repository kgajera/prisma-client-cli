// Vitest Snapshot v1

exports[`generate 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.QueryCommand = void 0;
const core_1 = require(\\"@oclif/core\\");
const client_1 = require(\\"@prisma/client\\");
class QueryCommand extends core_1.Command {
    async init() {
        await super.init();
        const { flags } = await this.parse(this.constructor);
        this.flags = flags;
    }
    getQueryArgs() {
        return Object.keys(this.flags).reduce((acc, path) => {
            const keys = path.split('.');
            let cur = acc;
            if (path === \\"_csv\\") {
                return acc;
            }
            keys.forEach((key, i) => {
                if (i < keys.length - 1) {
                    cur[key] = cur[key] || {};
                    cur = cur[key];
                }
                else {
                    cur[key] = this.flags[path];
                }
            });
            return acc;
        }, {});
    }
    async outputQueryResult(data) {
        const isArray = Array.isArray(data);
        if (data === null) {
            console.log(\\"Record not found\\");
            return;
        }
        else if (isArray && data.length === 0) {
            console.log(\\"No records found\\");
            return;
        }
        const dataArray = isArray ? data : [data], keys = Object.keys(dataArray[0]), columns = {};
        for (const key of keys) {
            columns[key] = {};
        }
        core_1.CliUx.ux.table(dataArray, columns, { csv: this.flags[\\"_csv\\"] ?? false });
    }
    async run() {
        const client = new client_1.PrismaClient(), args = this.getQueryArgs(), result = await this.query(client, args);
        this.outputQueryResult(result);
    }
}
exports.QueryCommand = QueryCommand;
QueryCommand.globalFlags = {
    _csv: core_1.Flags.boolean(),
};
"
`;

exports[`generate 2`] = `
"#!/usr/bin/env node

const oclif = require('@oclif/core')

oclif.run().then(require('@oclif/core/flush')).catch(require('@oclif/core/handle'))"
`;

exports[`generate 3`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
const core_1 = require(\\"@oclif/core\\");
class UserCommand extends core_1.Command {
    async run() {
        const help = new core_1.Help(this.config);
        help.showTopicHelp({ name: 'user' });
    }
}
exports.default = UserCommand;
UserCommand.hidden = true;
"
`;

exports[`generate 4`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
const core_1 = require(\\"@oclif/core\\");
const QueryCommand_1 = require(\\"../../QueryCommand\\");
class UserFindMany extends QueryCommand_1.QueryCommand {
    async query(client, args) {
        return client.user.findMany(args);
    }
}
exports.default = UserFindMany;
UserFindMany.flags = {
    ['where.id.equals']: core_1.Flags.integer({}),
    ['where.id.in']: core_1.Flags.integer({}),
    ['where.id.notIn']: core_1.Flags.integer({}),
    ['where.id.lt']: core_1.Flags.integer({}),
    ['where.id.lte']: core_1.Flags.integer({}),
    ['where.id.gt']: core_1.Flags.integer({}),
    ['where.id.gte']: core_1.Flags.integer({}),
    ['where.id.not']: core_1.Flags.integer({}),
    ['where.id']: core_1.Flags.integer({}),
    ['where.email.equals']: core_1.Flags.string({}),
    ['where.email.in']: core_1.Flags.string({}),
    ['where.email.notIn']: core_1.Flags.string({}),
    ['where.email.lt']: core_1.Flags.string({}),
    ['where.email.lte']: core_1.Flags.string({}),
    ['where.email.gt']: core_1.Flags.string({}),
    ['where.email.gte']: core_1.Flags.string({}),
    ['where.email.contains']: core_1.Flags.string({}),
    ['where.email.startsWith']: core_1.Flags.string({}),
    ['where.email.endsWith']: core_1.Flags.string({}),
    ['where.email.not']: core_1.Flags.string({}),
    ['where.email']: core_1.Flags.string({}),
    ['where.name.equals']: core_1.Flags.string({}),
    ['where.name.in']: core_1.Flags.string({}),
    ['where.name.notIn']: core_1.Flags.string({}),
    ['where.name.lt']: core_1.Flags.string({}),
    ['where.name.lte']: core_1.Flags.string({}),
    ['where.name.gt']: core_1.Flags.string({}),
    ['where.name.gte']: core_1.Flags.string({}),
    ['where.name.contains']: core_1.Flags.string({}),
    ['where.name.startsWith']: core_1.Flags.string({}),
    ['where.name.endsWith']: core_1.Flags.string({}),
    ['where.name.not']: core_1.Flags.string({}),
    ['where.name']: core_1.Flags.string({}),
    ['where.profile.id']: core_1.Flags.integer({}),
    ['where.profile.bio']: core_1.Flags.string({}),
    ['where.profile.userId']: core_1.Flags.integer({}),
    ['cursor.id']: core_1.Flags.integer({}),
    ['cursor.email']: core_1.Flags.string({}),
    ['take']: core_1.Flags.integer({}),
    ['skip']: core_1.Flags.integer({}),
};
"
`;

exports[`generate 5`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
const core_1 = require(\\"@oclif/core\\");
const QueryCommand_1 = require(\\"../../QueryCommand\\");
class UserDeleteOne extends QueryCommand_1.QueryCommand {
    async query(client, args) {
        return client.user.delete(args);
    }
}
exports.default = UserDeleteOne;
UserDeleteOne.flags = {
    ['where.id']: core_1.Flags.integer({}),
    ['where.email']: core_1.Flags.string({}),
};
"
`;
